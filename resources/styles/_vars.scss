$variable-prefix: em- !default;

// Spacing
//
// Control the default styling of most Bootstrap elements by modifying these
// variables. Mostly focused on spacing.
// You can add more entries to the $spacers map, should you need more variation.
$spacer: 1rem !default;
// prettier-ignore
$spacers: (
  0: 0,
  1: $spacer * 0.25, 	// 4px
  2: $spacer * 0.5, 	// 8px
  3: $spacer * 0.75, 	// 12px
  4: $spacer * 1, 		// 16px
  5: $spacer * 1.25, 	// 20px
  6: $spacer * 1.5, 	// 24px
  7: $spacer * 1.75, 	// 28px
  8: $spacer * 2, 		// 32px
  9: $spacer * 2.25, 	// 36px
  10: $spacer * 2.5, 	// 40px
  11: $spacer * 2.75, // 44px
  12: $spacer * 3, 		// 48px
  13: $spacer * 3, 		// 52px
  14: $spacer * 3.5, 	// 56px
  15: $spacer * 3.75, // 60px
  16: $spacer * 4, 		// 64px
  20: $spacer * 5, 		// 80px
  24: $spacer * 6, 		// 96px
  28: $spacer * 7, 		// 112px
) !default;

$negative-spacers: negativify-map($spacers) !default;

// Position
// Define the edge positioning anchors of the position utilities.

// scss-docs-start position-map
$position-values: (
  0: 0,
  50: 50%,
  100: 100%,
) !default;
// scss-docs-end position-map

// Grid breakpoints
//
// Define the minimum dimensions at which your layout will change,
// adapting to different screen sizes, for use in media queries.

$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  lg-alt: 1050px,
  xl: 1200px,
  xxl: 1650px,
) !default;

@include _assert-ascending($grid-breakpoints, '$grid-breakpoints');
@include _assert-starts-at-zero($grid-breakpoints, '$grid-breakpoints');

// Grid containers
//
// Define the maximum width of `.container` for different screen sizes.
$container-max-widths: (
  // sm: 540px,
  //   md: 756px,
  //   lg: 960px,
  xl: 1278px,
  // xxl: 1560px
) !default;

@include _assert-ascending($container-max-widths, '$container-max-widths');

// Grid columns
//
// Set the number of columns and specify the width of the gutters.

$grid-columns: 12 !default;
$grid-gutter-width: map-get($spacers, 8) !default;
$grid-row-columns: 6 !default;

$gutters: $spacers !default;

// Container padding

$container-padding-x: $grid-gutter-width * 0.5 !default;

/**
 *
 * GENERALIZED UTILITIES
 *
*/

$enable-important-utilities: true !default;

// Characters which are escaped by the escape-svg function
$escaped-characters: (
  ('<', '%3c'),
  ('>', '%3e'),
  ('#', '%23'),
  ('(', '%28'),
  (')', '%29')
) !default;

// Box Shadows
// prettier-ignore
$shadows: (
	'none': none,
  100: (0px 4px 4px -2px rgba(24, 39, 75, 0.08), 0px 2px 4px -2px rgba(24, 39, 75, 0.12)),
  200: (0px 8px 8px -4px rgba(24, 39, 75, 0.08), 0px 4px 6px -4px rgba(24, 39, 75, 0.12)),
	300: (0px 8px 16px -6px rgba(24, 39, 75, 0.08), 0px 6px 8px -6px rgba(24, 39, 75, 0.12)),
	400: (0px 8px 24px -4px rgba(24, 39, 75, 0.08), 0px 6px 12px -6px rgba(24, 39, 75, 0.12)),
	500: (0px 10px 32px -4px rgba(24, 39, 75, 0.1), 0px 6px 14px -6px rgba(24, 39, 75, 0.12)),
	600: (0px 12px 42px -4px rgba(24, 39, 75, 0.12), 0px 8px 18px -6px rgba(24, 39, 75, 0.12)),
	700: (0px 14px 64px -4px rgba(24, 39, 75, 0.12), 0px 8px 22px -6px rgba(24, 39, 75, 0.12)),
	800: (0px 18px 88px -4px rgba(24, 39, 75, 0.14), 0px 8px 28px -6px rgba(24, 39, 75, 0.12)),
);

$border-width: 1px !default;
$border-widths: (
  1: 1px,
  2: 2px,
  3: 3px,
  4: 4px,
  5: 5px,
) !default;

$border-color: rgba(0, 0, 0, 0) !default;
// scss-docs-end border-variables

// scss-docs-start border-radius-variables
$border-radius: map-get($spacers, 2) !default;
$border-radius-sm: map-get($spacers, 1) !default;
$border-radius-md: map-get($spacers, 4) !default;
$border-radius-lg: map-get($spacers, 8) !default;
$border-radius-pill: 100rem !default;

/**
 * Global Colors
 * -------------------------------------------
 *
 * These colors are used by every theme.
 *
 * Usage as a class on an element:
 * 	class="bg-black" = background black
 *  class="text-white" = color white
 *	class="btn btn-black" = button with black background and appropriate color.
 *
 *
 * Usage as CSS Var
 * 	 background: var(--error)
 *   color: var(--error-dark)
**/

$theme: (
  onyx: #2e3c41,
  hibiscus: #a42b5f,
  hibiscus-dark: #531f1e,
  hibiscus-light: #fcf3f3,
  maximum-blue: #3eb1c8,
  light-grey: #f4f4f4,
  light-grey-2: #cccccc,
  ice-blue: #c9e9f0,
  link: #004b85,
  success: #217c3a,
  danger: #d02b2b,
  grey: #e8e8e8,
  hibiscus-dark-2: #3c0e22,
);

$neutral: (
  900: #000000,
  800: #1c1c1c,
  700: #2c2c2c,
  600: #505050,
  500: #828282,
  400: #aeaeae,
  300: #d9d9d9,
  200: #e9e9e9,
  100: #f3f3f3,
  50: #ffffff,
);

// The contrast ratio to reach against white, to determine if color changes from "light" to "dark". Acceptable values for WCAG 2.0 are 3, 4.5 and 7.
// See https://www.w3.org/TR/WCAG20/#visual-audio-contrast-contrast
$min-contrast-ratio: 4.5 !default;

$white: map-get($neutral, 50) !default;
$black: map-get($neutral, 900) !default;
// Customize the light and dark text colors for use in our color contrast function.
$color-contrast-dark: $black;
$color-contrast-light: $white;

/**
 *
 * BUTTONS AND INPUTS
 *
*/
$disabled-button-text: #808080 !default;
$disabled-button-background: rgba(128, 128, 128, 0.3) !default;

// TODO: These can probably be repurposed for inputs in someway
$button-padding: 0.75rem 1.5rem;
$button-padding-small: 0.3125rem 0.625rem;

$shadow1: 0px 4px 18px rgba(0, 0, 0, 0.1);

/**
 *
 * HEADER HEIGHTS
 *
*/
$header-height-desktop: 166px;
$header-height-mobile: 75px;
